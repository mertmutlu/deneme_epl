<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F3348-Discovery_Demo\STM32F3348-Discovery_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F3348-Discovery_Demo\STM32F3348-Discovery_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Jul 06 10:39:47 2017
<BR><P>
<H3>Maximum Stack Usage =        172 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from stm32f3xx_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[32]">COMP2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[33]">COMP4_6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f3xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[12]">EXTI2_TS_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f3xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3b]">FPU_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3a]">HRTIM1_FLT_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[34]">HRTIM1_Master_IRQHandler</a> from stm32f3xx_it.o(i.HRTIM1_Master_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[35]">HRTIM1_TIMA_IRQHandler</a> from stm32f3xx_it.o(i.HRTIM1_TIMA_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[36]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[37]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[38]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[39]">HRTIM1_TIME_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f3xx_it.o(i.HardFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f3xx_it.o(i.PendSV_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f3xx_it.o(i.SVC_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3d]">SystemInit</a> from system_stm32f30x.o(i.SystemInit) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[30]">TIM6_DAC1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[31]">TIM7_DAC2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from stm32f3xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2d]">USART3_IRQHandler</a> from stm32f3xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[3c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>COMP4_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM7_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[42]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[eb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_2_IRQHandler &rArr; ADC_GetInjectedConversionValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopInjectedConversion
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectedConversionValue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[58]"></a>ADC_CommonInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[57]"></a>ADC_GetCalibrationValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_GetCalibrationValue))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[4a]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_GetInjectedConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetInjectedConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>ADC_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5a]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, stm32f30x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[54]"></a>ADC_SelectCalibrationMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_SelectCalibrationMode))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[55]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[4e]"></a>ADC_StopInjectedConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_StopInjectedConversion))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>ADC_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[53]"></a>ADC_VoltageRegulatorCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_VoltageRegulatorCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CODEUR_RESET</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.CODEUR_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CODEUR_RESET &rArr; CODEUR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[5e]"></a>CODEUR_Read</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.CODEUR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CODEUR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_RESET
</UL>

<P><STRONG><a name="[65]"></a>DAC_Cmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f30x_dac.o(i.DAC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
</UL>

<P><STRONG><a name="[63]"></a>DAC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f30x_dac.o(i.DAC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
</UL>

<P><STRONG><a name="[64]"></a>DAC_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f30x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
</UL>

<P><STRONG><a name="[bf]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f30x_dac.o(i.DAC_SetChannel1Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; STM_EVAL_PBGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBGetState
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI6_Config</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(i.EXTI6_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI6_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[6f]"></a>EXTI6_disable</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(i.EXTI6_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI6_disable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ads_read_18
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_read_18
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>EXTI_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f30x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>EXTI_Init</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, stm32f30x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[d4]"></a>EnableTiming</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.EnableTiming))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>GPIO_Configuration_encoder</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.GPIO_Configuration_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Configuration_encoder &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f30x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ports
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_encoder
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[73]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f30x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_encoder
</UL>

<P><STRONG><a name="[95]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBGetState
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rec
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_read_18
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_cal
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_5
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rec
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ee
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_driver_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_1
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_control
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_read_18
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_speed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_gain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_pdwn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_channel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_cal
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ports
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_5
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rec
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ee
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_driver_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_1
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_control
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_read_18
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_speed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_gain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_pdwn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_channel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_cal
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.HRTIM1_Master_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HRTIM1_Master_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_ClearCommonITPendingBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_SetBurstCompare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.HRTIM1_TIMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HRTIM1_TIMA_IRQHandler &rArr; SetHRTIM_BuckMode &rArr; HRTIM_Unselect_OutputTIMx &rArr; HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_ClearFlag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BuckMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BoostMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM_ClearCommonITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f30x_hrtim.o(i.HRTIM_ClearCommonITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_Master_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>HRTIM_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f30x_hrtim.o(i.HRTIM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HRTIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HRTIM_SetBurstCompare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.HRTIM_SetBurstCompare))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_Master_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HRTIM_WaveformCounterStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_hrtim.o(i.HRTIM_WaveformCounterStart))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BuckMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BoostMode
</UL>

<P><STRONG><a name="[79]"></a>HRTIM_WaveformOutputConfig</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, stm32f30x_hrtim.o(i.HRTIM_WaveformOutputConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Unselect_OutputTIMx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BuckMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BoostMode
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>HighDensByteRead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 25lc512.o(i.HighDensByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ee
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ee
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteout
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytein
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u32_eeprom
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u16_eeprom
</UL>

<P><STRONG><a name="[80]"></a>HighDensByteWrite</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, 25lc512.o(i.HighDensByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ee
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ee
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIP_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_eeprom
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f30x_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[df]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[84]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[51]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ports
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[62]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[6b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[9e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 1316 bytes, Stack size 28 bytes, stm32f30x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Delay_Init
</UL>

<P><STRONG><a name="[86]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f30x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[85]"></a>RCC_LSEConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[88]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[87]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[8b]"></a>RTC_ClearFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[8f]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f30x_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[90]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[8c]"></a>RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f30x_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_3
</UL>

<P><STRONG><a name="[8e]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f30x_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_3
</UL>

<P><STRONG><a name="[8a]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f30x_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[91]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f30x_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_2
</UL>

<P><STRONG><a name="[93]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f30x_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_2
</UL>

<P><STRONG><a name="[89]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f30x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[94]"></a>ReadStatusReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 25lc512.o(i.ReadStatusReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ee
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ee
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteout
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytein
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIP_Poll
</UL>

<P><STRONG><a name="[67]"></a>STM_EVAL_LEDOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f3348_discovery.o(i.STM_EVAL_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>STM_EVAL_PBGetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f3348_discovery.o(i.STM_EVAL_PBGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM_EVAL_PBGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f30x_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>

<P><STRONG><a name="[d8]"></a>SendChar3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.SendChar3))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_short
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_int
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_header
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_sum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command
</UL>

<P><STRONG><a name="[77]"></a>SetHRTIM_BoostMode</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.SetHRTIM_BoostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetHRTIM_BoostMode &rArr; HRTIM_Unselect_OutputTIMx &rArr; HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformOutputConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformCounterStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Unselect_OutputTIMx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>SetHRTIM_BuckMode</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.SetHRTIM_BuckMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetHRTIM_BuckMode &rArr; HRTIM_Unselect_OutputTIMx &rArr; HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformOutputConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformCounterStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_Unselect_OutputTIMx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM1_TIMA_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; CODEUR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>TIMER_Configuration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.TIMER_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_Configuration &rArr; TIM_EncoderInterfaceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[99]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f30x_tim.o(i.TIM_EncoderInterfaceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[5f]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_Read
</UL>

<P><STRONG><a name="[9b]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[5d]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEUR_RESET
</UL>

<P><STRONG><a name="[9d]"></a>TM_Delay_Init</STRONG> (Thumb, 26 bytes, Stack size 88 bytes, main.o(i.TM_Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TM_Delay_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART3_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr_genel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>USART_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[9f]"></a>USART_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f30x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>USART_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f30x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[a2]"></a>USART_Init</STRONG> (Thumb, 220 bytes, Stack size 104 bytes, stm32f30x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>WIP_Poll</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 25lc512.o(i.WIP_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WIP_Poll &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
</UL>

<P><STRONG><a name="[81]"></a>WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 25lc512.o(i.WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ee
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ee
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteout
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ef]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a3]"></a>ads_cal</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ads1232.o(i.ads_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_clock_ads
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[a7]"></a>ads_channel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ads1232.o(i.ads_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[a8]"></a>ads_pdwn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ads1232.o(i.ads_pdwn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads_pdwn
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[71]"></a>ads_read_18</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ads1232.o(i.ads_read_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ads_read_18
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_clock_ads
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>ads_set_gain</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ads1232.o(i.ads_set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads_set_gain
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[aa]"></a>ads_set_speed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ads1232.o(i.ads_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ads_set_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[ab]"></a>ana_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_press.o(i.ana_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ana_task &rArr; key_check_ana &rArr; goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_ana
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indukator
</UL>

<P><STRONG><a name="[a0]"></a>buzzer_control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, relay.o(i.buzzer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buzzer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>bytein</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 25lc512.o(i.bytein))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bytein &rArr; spi_rec
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rec
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>

<P><STRONG><a name="[7d]"></a>byteout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 25lc512.o(i.byteout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>

<P><STRONG><a name="[af]"></a>calibration_task</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, task_press.o(i.calibration_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = calibration_task &rArr; calibration_task_state_0 &rArr; read_u32_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indukator
</UL>

<P><STRONG><a name="[b0]"></a>calibration_task_state_0</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, task_press.o(i.calibration_task_state_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = calibration_task_state_0 &rArr; read_u32_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u32_eeprom
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
</UL>

<P><STRONG><a name="[b1]"></a>calibration_task_state_1</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, task_press.o(i.calibration_task_state_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calibration_task_state_1 &rArr; write_u32_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_eeprom
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
</UL>

<P><STRONG><a name="[b2]"></a>calibration_task_state_2</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, task_press.o(i.calibration_task_state_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calibration_task_state_2 &rArr; write_u32_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_eeprom
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
</UL>

<P><STRONG><a name="[b3]"></a>calibration_task_state_3</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, task_press.o(i.calibration_task_state_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calibration_task_state_3 &rArr; write_u32_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_eeprom
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
</UL>

<P><STRONG><a name="[b4]"></a>calibration_task_state_4</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, task_press.o(i.calibration_task_state_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = calibration_task_state_4 &rArr; EXTI6_disable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_icon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_driver_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_speed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_set_gain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_pdwn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_channel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_cal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
</UL>

<P><STRONG><a name="[dd]"></a>delay_clock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 25lc512.o(i.delay_clock))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rec
</UL>

<P><STRONG><a name="[a5]"></a>delay_clock_ads</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ads1232.o(i.delay_clock_ads))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_read_18
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads_cal
</UL>

<P><STRONG><a name="[e1]"></a>delay_ee</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 25lc512.o(i.delay_ee))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_eeprom
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
</UL>

<P><STRONG><a name="[b8]"></a>delay_lcd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.delay_lcd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
</UL>

<P><STRONG><a name="[7f]"></a>disable_ee</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 25lc512.o(i.disable_ee))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_ee
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>

<P><STRONG><a name="[7c]"></a>enable_ee</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 25lc512.o(i.enable_ee))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_ee
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusReg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>

<P><STRONG><a name="[c1]"></a>genel_task_test</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, task_press.o(i.genel_task_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = genel_task_test &rArr; genel_task_test_state_2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_0
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indukator
</UL>

<P><STRONG><a name="[c2]"></a>genel_task_test_state_0</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, task_press.o(i.genel_task_test_state_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = genel_task_test_state_0 &rArr; read_u16_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
</UL>

<P><STRONG><a name="[c3]"></a>genel_task_test_state_1</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, task_press.o(i.genel_task_test_state_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = genel_task_test_state_1 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
</UL>

<P><STRONG><a name="[c4]"></a>genel_task_test_state_2</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, task_press.o(i.genel_task_test_state_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = genel_task_test_state_2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
</UL>

<P><STRONG><a name="[c5]"></a>genel_task_test_state_5</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, task_press.o(i.genel_task_test_state_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = genel_task_test_state_5 &rArr; goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
</UL>

<P><STRONG><a name="[c6]"></a>genel_task_test_state_6</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, task_press.o(i.genel_task_test_state_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = genel_task_test_state_6 &rArr; goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
</UL>

<P><STRONG><a name="[b5]"></a>goto_pic</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.goto_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_short
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_register
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_header
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_sum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_ana
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_0
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>indukator</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, task_press.o(i.indukator))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = indukator &rArr; genel_task_test &rArr; genel_task_test_state_2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>init_ports</STRONG> (Thumb, 776 bytes, Stack size 16 bytes, main.o(i.init_ports))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_ports &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>input_number_unsigned16</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd.o(i.input_number_unsigned16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = input_number_unsigned16 &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_short
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_header
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_sum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_0
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
</UL>

<P><STRONG><a name="[ba]"></a>input_number_unsigned32</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd.o(i.input_number_unsigned32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_number_unsigned32 &rArr; send_int
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_short
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_int
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_header
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_sum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
</UL>

<P><STRONG><a name="[d0]"></a>kanal_setting_task_state_0</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, task_press.o(i.kanal_setting_task_state_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kanal_setting_task_state_0 &rArr; read_u16_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_1
</UL>

<P><STRONG><a name="[d1]"></a>kanal_setting_task_state_1</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, task_press.o(i.kanal_setting_task_state_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kanal_setting_task_state_1 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_1
</UL>

<P><STRONG><a name="[d2]"></a>kanal_setting_task_state_2</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, task_press.o(i.kanal_setting_task_state_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kanal_setting_task_state_2 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_1
</UL>

<P><STRONG><a name="[d3]"></a>kanal_setting_task_state_3</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, task_press.o(i.kanal_setting_task_state_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kanal_setting_task_state_3 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u16_eeprom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_1
</UL>

<P><STRONG><a name="[ac]"></a>key_check_ana</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, task_press.o(i.key_check_ana))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_check_ana &rArr; goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_task
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indukator
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ports
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Delay_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_encoder
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTiming
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c0]"></a>put_icon</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd.o(i.put_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = put_icon &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_short
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_header
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_sum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[d7]"></a>read_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_mem &rArr; read_u16_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u16_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>read_u16_eeprom</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, 25lc512.o(i.read_u16_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_u16_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_0
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
</UL>

<P><STRONG><a name="[b9]"></a>read_u32_eeprom</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, 25lc512.o(i.read_u32_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_u32_eeprom &rArr; HighDensByteRead &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_0
</UL>

<P><STRONG><a name="[bd]"></a>relay_1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, relay.o(i.relay_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relay_1
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[be]"></a>relay_driver_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, relay.o(i.relay_driver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relay_driver_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_4
</UL>

<P><STRONG><a name="[c9]"></a>send_command</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_command
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_icon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>

<P><STRONG><a name="[c8]"></a>send_data_sum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.send_data_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_data_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_icon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>

<P><STRONG><a name="[c7]"></a>send_header</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_header
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_icon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>

<P><STRONG><a name="[cf]"></a>send_int</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd.o(i.send_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
</UL>

<P><STRONG><a name="[ca]"></a>send_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.send_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_register
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>

<P><STRONG><a name="[cb]"></a>send_short</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd.o(i.send_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_icon
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>

<P><STRONG><a name="[cd]"></a>setting_task</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, task_press.o(i.setting_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setting_task &rArr; setting_task_state_1 &rArr; kanal_setting_task_state_3 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_3
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task_state_0
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indukator
</UL>

<P><STRONG><a name="[d9]"></a>setting_task_state_0</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, task_press.o(i.setting_task_state_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setting_task_state_0 &rArr; goto_pic &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task
</UL>

<P><STRONG><a name="[da]"></a>setting_task_state_1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, task_press.o(i.setting_task_state_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setting_task_state_1 &rArr; kanal_setting_task_state_3 &rArr; write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_0
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task
</UL>

<P><STRONG><a name="[db]"></a>setting_task_state_2</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, task_press.o(i.setting_task_state_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setting_task_state_2 &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task
</UL>

<P><STRONG><a name="[dc]"></a>setting_task_state_3</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, task_press.o(i.setting_task_state_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setting_task_state_3 &rArr; input_number_unsigned16 &rArr; send_short
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_number_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_task
</UL>

<P><STRONG><a name="[ad]"></a>spi_rec</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, 25lc512.o(i.spi_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_rec
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytein
</UL>

<P><STRONG><a name="[ae]"></a>spi_send</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, 25lc512.o(i.spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteout
</UL>

<P><STRONG><a name="[d5]"></a>usart1_init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, main.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>usart3_init</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, main.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>usart_isr_genel</STRONG> (Thumb, 578 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.usart_isr_genel))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>write_u16_eeprom</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 25lc512.o(i.write_u16_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_u16_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ee
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kanal_setting_task_state_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genel_task_test_state_1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_1
</UL>

<P><STRONG><a name="[bc]"></a>write_u32_eeprom</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, 25lc512.o(i.write_u32_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_u32_eeprom &rArr; HighDensByteWrite &rArr; WriteEnable &rArr; ReadStatusReg &rArr; byteout &rArr; spi_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ee
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighDensByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_task_state_1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>HRTIM_OutputConfig</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32f30x_hrtim.o(i.HRTIM_OutputConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HRTIM_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformOutputConfig
</UL>

<P><STRONG><a name="[8d]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[92]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f30x_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[4f]"></a>ADC_Config</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, main.o(i.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADC_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VoltageRegulatorCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectCalibrationMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationValue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>DAC_Config</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, main.o(i.DAC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DAC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>HRTIM_Unselect_OutputTIMx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.HRTIM_Unselect_OutputTIMx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HRTIM_Unselect_OutputTIMx &rArr; HRTIM_WaveformOutputConfig &rArr; HRTIM_OutputConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRTIM_WaveformOutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BuckMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHRTIM_BoostMode
</UL>

<P><STRONG><a name="[83]"></a>RTC_Config</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Config &rArr; RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>SetSysClock</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, system_stm32f30x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
